name: Deploy sslim-backend

on:
  push:
    branches: [ deploy ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Spring Boot JAR
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Prepare top-level jar
        run: |
          set -e
          mkdir -p build/libs
          JAR=$(find . -type f -path "*/build/libs/*.jar" | head -1)
          [ -z "$JAR" ] && { echo "No jar under */build/libs"; exit 1; }
          cp -f "$JAR" build/libs/app.jar

      - name: Assert files exist before scp
        run: |
          set -e
          [ -f Dockerfile ] || { echo "Dockerfile missing"; exit 1; }
          [ -f docker-compose.yml ] || { echo "docker-compose.yml missing"; exit 1; }
          [ -f build/libs/app.jar ] || { echo "app.jar missing"; exit 1; }

      - name: Copy compose/Dockerfile/app.jar to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key:      ${{ secrets.EC2_SSH_KEY }}
          source:   "Dockerfile,docker-compose.yml,build/libs/app.jar"
          target:   "/home/${{ secrets.EC2_USER }}/SSLIM"
          strip_components: 0

      - name: Deploy via docker compose (no env file)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:         ${{ secrets.EC2_HOST }}
          username:     ${{ secrets.EC2_USER }}
          key:          ${{ secrets.EC2_SSH_KEY }}
          script_stop:  true
          script: |
            set -e
            COMPOSE_DIR="$HOME/SSLIM"
            cd "$COMPOSE_DIR"

            docker compose down --remove-orphans || true
            docker compose up -d --build

            # healthcheck 대기 (서비스명이 sslim-app이어야 함)
            for i in {1..30}; do
              sleep 2
              state=$(docker inspect --format='{{.State.Health.Status}}' sslim-app 2>/dev/null || true)
              [ "$state" = "healthy" ] && { echo "App healthy"; exit 0; }
            done
            echo "Healthcheck timeout. Recent logs:"
            docker compose logs --no-color --tail=200
            exit 1