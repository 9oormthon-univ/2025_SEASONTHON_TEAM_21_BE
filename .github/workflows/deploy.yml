name: Deploy sslim-backend

on:
  push:
    branches: [ deploy ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2) JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3) gradlew 권한 + 빌드
      - name: Build Spring Boot JAR
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # 4) 최상위 app.jar 준비
      - name: Prepare top-level jar
        run: |
          set -e
          mkdir -p build/libs
          JAR=$(find . -type f -path "*/build/libs/*.jar" | head -1)
          [ -z "$JAR" ] && { echo "No jar under */build/libs"; exit 1; }
          cp -f "$JAR" build/libs/app.jar

      # 5) 서버 .env 필수 키 확인
      - name: Check server .env
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:         ${{ secrets.EC2_HOST }}
          username:     ${{ secrets.EC2_USER }}
          key:          ${{ secrets.EC2_SSH_KEY }}
          script_stop:  true
          script: |
            set -e
            ENV_FILE="/srv/app/current/.env"
            [ -f "$ENV_FILE" ] || { echo "ENV not found: $ENV_FILE"; exit 1; }
            for k in DB_URL DB_USER DB_PASSWORD; do
              grep -q "^$k=" "$ENV_FILE" || { echo "Missing $k"; exit 1; }
            done

      # 6) 필요한 파일만 전송
      - name: Copy compose/Dockerfile/app.jar to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key:      ${{ secrets.EC2_SSH_KEY }}
          source: |
            Dockerfile
            docker-compose.yml
            build/libs/app.jar
          target: "/home/${{ secrets.EC2_USER }}/SSLIM"
          strip_components: 0

      # 7) docker compose 배포(+헬스체크)
      - name: Deploy via docker compose
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:         ${{ secrets.EC2_HOST }}
          username:     ${{ secrets.EC2_USER }}
          key:          ${{ secrets.EC2_SSH_KEY }}
          script_stop:  true
          script: |
            set -e
            ENV_FILE="/srv/app/current/.env"
            COMPOSE_DIR="$HOME/SSLIM"
            cd "$COMPOSE_DIR"

            docker compose down --remove-orphans || true
            docker compose --env-file "$ENV_FILE" up -d --build

            # healthcheck: 서비스 이름이 'sslim-app'이고 docker-compose.yml에 healthcheck가 정의돼 있어야 함
            for i in {1..30}; do
              sleep 2
              state=$(docker inspect --format='{{.State.Health.Status}}' sslim-app 2>/dev/null || true)
              [ "$state" = "healthy" ] && { echo "App healthy"; exit 0; }
            done
            echo "Healthcheck timeout. Recent logs:"
            docker compose logs --no-color --tail=200
            exit 1