name: Deploy sslim-backend

on:
  push:
    branches: [ deploy ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐시
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. gradlew 실행 권한 부여
      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      # 5. Spring Boot JAR 빌드
      - name: Build Spring Boot JAR
        run: ./gradlew clean build -x test

      # 6. 디버깅용 (시크릿 길이만 확인)
      - name: Debug EC2 variables
        run: |
          echo "EC2_HOST: ${EC2_HOST:0:5}*****"
          echo "EC2_USER: ${EC2_USER}"
          echo "EC2_KEY length: $(echo "$EC2_KEY" | wc -c)"
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_KEY:  ${{ secrets.EC2_SSH_KEY }}

      # 7. 서버에 .env 필수 키 확인
      - name: Guard required env on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key:      ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd ~/JIDO || mkdir -p ~/JIDO && cd ~/JIDO
            if [ ! -f .env ]; then
              echo "❌ .env not found in ~/JIDO"; exit 1
            fi
            for k in DB_URL DB_USER DB_PASSWORD; do
              if ! grep -q "^$k=" .env 2>/dev/null; then
                echo "❌ Missing $k in .env"; exit 1
              fi
            done
            echo "✅ .env OK"

      # 8. EC2로 프로젝트 전송 (불필요 파일 제외)
      - name: Copy project to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key:      ${{ secrets.EC2_SSH_KEY }}
          source: |
            .
            !.env
            !.git/**
            !.github/**
            !node_modules/**
          target: "/home/${{ secrets.EC2_USER }}/JIDO"
          debug: true
          strip_components: 0

      # 9. 서버에서 docker compose로 빌드 및 실행
      - name: SSH deploy (docker compose up --build)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key:      ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd ~/JIDO
            docker compose down || true
            docker compose up -d --build

            echo "Waiting for healthcheck..."
            for i in {1..30}; do
              sleep 2
              state=$(docker inspect --format='{{.State.Health.Status}}' sslim-app 2>/dev/null || true)
              if [ "$state" = "healthy" ]; then
                echo "✅ App healthy"; exit 0
              fi
            done
            echo "❌ Healthcheck timeout. Recent logs:"
            docker compose logs --no-color --tail=200
            exit 1