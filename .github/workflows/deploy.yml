name: Deploy sslim-backend

on:
  push:
    branches: [ deploy ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # ✅ 부트 JAR만 빌드 (plain JAR 생성 안 함)
      - name: Build Spring Boot bootJar
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar -x test
          ls -la build/libs

      # ✅ 산출물 존재 확인
      - name: Assert bootJar exists
        run: |
          set -e
          [ -f build/libs/app.jar ] || { echo "app.jar not found"; ls -la build/libs; exit 1; }

      # 필요 파일 전송
      - name: Copy compose/Dockerfile/app.jar to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host:     ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key:      ${{ secrets.EC2_SSH_KEY }}
          source:   "Dockerfile,docker-compose.yml,build/libs/app.jar"
          target:   "/home/${{ secrets.EC2_USER }}/SSLIM"
          strip_components: 0

      # 배포
      - name: Deploy via docker compose (no env file)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            #!/bin/sh
            set -eu

            COMPOSE_DIR="$HOME/SSLIM"
            APP_NAME="sslim-app"

            cd "$COMPOSE_DIR"

            # 기존 컨테이너/오펀 안전 정리 (실패 무시)
            docker rm -f "$APP_NAME" >/dev/null 2>&1 || true
            docker compose down --remove-orphans >/dev/null 2>&1 || true

            # 빌드 & 기동
            if ! docker compose up -d --build; then
              echo "[FAIL] compose up 실패. 최근 로그:"
              docker compose logs --no-color --tail=200 || true
              exit 1
            fi

            # 헬스체크 대기 (최대 60초)
            i=0
            while [ $i -lt 60 ]; do
              sleep 2
              # 컨테이너 상태/헬스 상태 읽기
              STATE=$(docker inspect --format='{{.State.Status}}' "$APP_NAME" 2>/dev/null || echo "unknown")
              HEALTH=$(docker inspect --format='{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' "$APP_NAME" 2>/dev/null || echo "none")

              echo "[$i s] state=$STATE health=$HEALTH"

              # healthcheck가 없으면 running만 확인
              if [ "$HEALTH" = "none" ] && [ "$STATE" = "running" ]; then
                echo "[OK] 컨테이너 실행 중(healthcheck 미설정)."
                exit 0
              fi

              if [ "$HEALTH" = "healthy" ]; then
                echo "[OK] 헬시."
                exit 0
              fi

              i=$((i+2))
            done

            echo "[FAIL] 헬스체크 타임아웃. 최근 로그:"
            docker compose logs --no-color --tail=200 || true
            exit 1