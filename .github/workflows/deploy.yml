name: deploy

on:
  push:
    branches: [ "deploy" ]
    # 또는 태그 기준 배포 원하면:
    # tags: [ "v*" ]

env:
  REGISTRY: docker.io
  IMAGE_REPO: ${{ secrets.APP_IMAGE_REPO }}   # ex) docker.io/yourname/jido-app
  IMAGE_TAG: ${{ github.sha }}                # 커밋 SHA로 태그
  LATEST_TAG: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build JAR
        run: ./gradlew clean build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_REPO }}:${{ env.LATEST_TAG }}
          # BuildKit 캐시 사용(옵션)
          cache-from: type=registry,ref=${{ env.IMAGE_REPO }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_REPO }}:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: SSH Deploy (pull & compose up)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script_stop: true
          script: |
            set -e

            # 배포 디렉토리로 이동 (docker-compose.yml과 .env가 있는 경로)
            cd /opt/sslim-app

            # 최신 이미지 풀
            docker pull ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}

            # .env의 APP_IMAGE를 새 태그로 업데이트(선택)
            if grep -q '^APP_IMAGE=' .env; then
              sed -i 's|^APP_IMAGE=.*$|APP_IMAGE='${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}'|' .env
            else
              echo "APP_IMAGE=${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}" >> .env
            fi

            # 안전 롤링 재기동
            docker compose pull
            docker compose up -d

            # 헬스체크 대기(옵션)
            echo "Waiting health..."
            for i in {1..30}; do
              sleep 2
              if docker inspect --format='{{json .State.Health.Status}}' sslim-app 2>/dev/null | grep -q healthy; then
                echo "App is healthy"
                exit 0
              fi
            done
            echo "Healthcheck timeout"
            docker compose logs --no-color --tail=200
            exit 1